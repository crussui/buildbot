# -*- python -*-
# ex: set syntax=python:

# this config needs an additional master sided slave inside the masters directory
# e.g. master directory: '~/master'
#      slave directory:  '~/master/slave_master'

# define configuration
repo_source = 'git://github.com/ClusterGruppe/source'
repo_jobs = 'git://github.com/ClusterGruppe/jobs.git'
name_source = 'main.cpp'
name_ini = 'ini.txt'
name_result = 'result.txt'
name_slave_master = 'slave_master'
pwd_slave_master = 'pass'
name_slave_slave = 'slave_slave'
pwd_slave_slave = 'pass'


# get the full path of buildmasters directory (e.g. '/home/user_x/master')
import os
path_master = os.getcwd()


## master config
c = BuildmasterConfig = {}


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave(str(name_slave_master), str(pwd_slave_master)),
	       BuildSlave(str(name_slave_slave), str(pwd_slave_slave))]
 
c['slavePortnum'] = 9989


####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].append(GitPoller(
        str(repo_jobs),
        workdir='gitpoller-workdir', branch='master',
        pollinterval=30))


####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter

c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name='job_list_scheduler',
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=20,
                            builderNames=['get_jobs']))
c['schedulers'].append(Triggerable(
                            name='push_job_scheduler',
                            builderNames=['push_job']))
c['schedulers'].append(Triggerable(
                            name='do_job_scheduler',
                            builderNames=['do_job']))


####### BUILDFACTORIES

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import CopyDirectory
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.slave import MakeDirectory
from buildbot.steps.slave import FileExists
from buildbot.steps.trigger import Trigger
from buildbot.steps.transfer import FileUpload
from buildbot.steps.transfer import FileDownload
from buildbot.steps.master import MasterShellCommand

# 'factory_get_jobs' (execute on the same machine as the master)
#	copy a list of jobs (initialization files) from a remote repository to a local directory 
#	trigger 'push_job_scheduler'
factory_get_jobs = BuildFactory()
factory_get_jobs.addStep(Git(repourl=str(repo_jobs), mode='incremental'))
factory_get_jobs.addStep(Trigger(schedulerNames=['push_job_scheduler']))

# 'factory_push_jobs' (execute on the same machine as the master)
#	move one file between local builder directories 
#	check if file for job exists
#	trigger 'do_job_scheduler'
factory_push_job = BuildFactory()
factory_push_job.addStep(ShellCommand(command=['push_script']))
factory_push_job.addStep(FileExists(file='/home/master/master/slave_master/push_job/ini'))
factory_push_job.addStep(Trigger(schedulerNames=['do_job_scheduler']))

# 'factory_do_job' (execute on any unix based slave machine)
#	copy source file from a remote repository, 
#	copy initalization file from a directory on the master machine
#	trigger 'push_job_scheduler'
#	compile files
#	execute files
#	transfer result as file to the master machine
factory_do_job = BuildFactory()
factory_do_job.addStep(Git(repourl=str(repo_source), mode='full', method='clobber'))
factory_do_job.addStep(FileDownload(mastersrc=str(path_master)+'/'+str(name_slave_master)+'/push_job/ini', slavedest=str(name_ini)))
factory_do_job.addStep(ShellCommand(command=['g++','-o','job_exe',str(name_source)]))
factory_do_job.addStep(ShellCommand(command=['./job_exe']))
factory_do_job.addStep(FileUpload(slavesrc=str(name_result), masterdest='results/result'))
factory_do_job.addStep(MasterShellCommand(command="""
	cd /home/master/master/results;
	mv result result_$(date +%F_%H:%M:%S)"""))
factory_do_job.addStep(Trigger(schedulerNames=['push_job_scheduler']))


####### BUILDERS

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name='get_jobs',
      slavenames=[str(name_slave_master)],
      factory=factory_get_jobs))
c['builders'].append(
    BuilderConfig(name='push_job',
      slavenames=[str(name_slave_master)],
      factory=factory_push_job))
c['builders'].append(
    BuilderConfig(name='do_job',
      slavenames=[str(name_slave_slave)],
      factory=factory_do_job))


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
